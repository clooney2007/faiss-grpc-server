// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faiss.proto

#ifndef PROTOBUF_INCLUDED_faiss_2eproto
#define PROTOBUF_INCLUDED_faiss_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_faiss_2eproto 

namespace protobuf_faiss_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_faiss_2eproto
namespace faiss {
class HeartbeatResponse;
class HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class Neighbor;
class NeighborDefaultTypeInternal;
extern NeighborDefaultTypeInternal _Neighbor_default_instance_;
class SearchByIdRequest;
class SearchByIdRequestDefaultTypeInternal;
extern SearchByIdRequestDefaultTypeInternal _SearchByIdRequest_default_instance_;
class SearchByIdResponse;
class SearchByIdResponseDefaultTypeInternal;
extern SearchByIdResponseDefaultTypeInternal _SearchByIdResponse_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace faiss
namespace google {
namespace protobuf {
template<> ::faiss::HeartbeatResponse* Arena::CreateMaybeMessage<::faiss::HeartbeatResponse>(Arena*);
template<> ::faiss::Neighbor* Arena::CreateMaybeMessage<::faiss::Neighbor>(Arena*);
template<> ::faiss::SearchByIdRequest* Arena::CreateMaybeMessage<::faiss::SearchByIdRequest>(Arena*);
template<> ::faiss::SearchByIdResponse* Arena::CreateMaybeMessage<::faiss::SearchByIdResponse>(Arena*);
template<> ::faiss::SearchRequest* Arena::CreateMaybeMessage<::faiss::SearchRequest>(Arena*);
template<> ::faiss::SearchResponse* Arena::CreateMaybeMessage<::faiss::SearchResponse>(Arena*);
template<> ::faiss::Vector* Arena::CreateMaybeMessage<::faiss::Vector>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace faiss {

// ===================================================================

class HeartbeatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:faiss.HeartbeatResponse) */ {
 public:
  HeartbeatResponse();
  virtual ~HeartbeatResponse();

  HeartbeatResponse(const HeartbeatResponse& from);

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartbeatResponse(HeartbeatResponse&& from) noexcept
    : HeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
               &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HeartbeatResponse* other);
  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatResponse* New() const final {
    return CreateMaybeMessage<HeartbeatResponse>(NULL);
  }

  HeartbeatResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartbeatResponse& from);
  void MergeFrom(const HeartbeatResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:faiss.HeartbeatResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_faiss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:faiss.Vector) */ {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Vector* other);
  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(NULL);
  }

  Vector* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_val = 5;
  int float_val_size() const;
  void clear_float_val();
  static const int kFloatValFieldNumber = 5;
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_val() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_val();

  // @@protoc_insertion_point(class_scope:faiss.Vector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > float_val_;
  mutable int _float_val_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_faiss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:faiss.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(NULL);
  }

  SearchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .faiss.Vector vector = 1;
  bool has_vector() const;
  void clear_vector();
  static const int kVectorFieldNumber = 1;
  private:
  const ::faiss::Vector& _internal_vector() const;
  public:
  const ::faiss::Vector& vector() const;
  ::faiss::Vector* release_vector();
  ::faiss::Vector* mutable_vector();
  void set_allocated_vector(::faiss::Vector* vector);

  // uint64 top_k = 2;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::uint64 top_k() const;
  void set_top_k(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:faiss.SearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::faiss::Vector* vector_;
  ::google::protobuf::uint64 top_k_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_faiss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Neighbor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:faiss.Neighbor) */ {
 public:
  Neighbor();
  virtual ~Neighbor();

  Neighbor(const Neighbor& from);

  inline Neighbor& operator=(const Neighbor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Neighbor(Neighbor&& from) noexcept
    : Neighbor() {
    *this = ::std::move(from);
  }

  inline Neighbor& operator=(Neighbor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Neighbor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neighbor* internal_default_instance() {
    return reinterpret_cast<const Neighbor*>(
               &_Neighbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Neighbor* other);
  friend void swap(Neighbor& a, Neighbor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Neighbor* New() const final {
    return CreateMaybeMessage<Neighbor>(NULL);
  }

  Neighbor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Neighbor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Neighbor& from);
  void MergeFrom(const Neighbor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neighbor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:faiss.Neighbor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  float score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_faiss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:faiss.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SearchResponse* other);
  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(NULL);
  }

  SearchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .faiss.Neighbor neighbors = 2;
  int neighbors_size() const;
  void clear_neighbors();
  static const int kNeighborsFieldNumber = 2;
  ::faiss::Neighbor* mutable_neighbors(int index);
  ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >*
      mutable_neighbors();
  const ::faiss::Neighbor& neighbors(int index) const;
  ::faiss::Neighbor* add_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >&
      neighbors() const;

  // @@protoc_insertion_point(class_scope:faiss.SearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor > neighbors_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_faiss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchByIdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:faiss.SearchByIdRequest) */ {
 public:
  SearchByIdRequest();
  virtual ~SearchByIdRequest();

  SearchByIdRequest(const SearchByIdRequest& from);

  inline SearchByIdRequest& operator=(const SearchByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchByIdRequest(SearchByIdRequest&& from) noexcept
    : SearchByIdRequest() {
    *this = ::std::move(from);
  }

  inline SearchByIdRequest& operator=(SearchByIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchByIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchByIdRequest* internal_default_instance() {
    return reinterpret_cast<const SearchByIdRequest*>(
               &_SearchByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SearchByIdRequest* other);
  friend void swap(SearchByIdRequest& a, SearchByIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchByIdRequest* New() const final {
    return CreateMaybeMessage<SearchByIdRequest>(NULL);
  }

  SearchByIdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchByIdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchByIdRequest& from);
  void MergeFrom(const SearchByIdRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByIdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 top_k = 2;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::uint64 top_k() const;
  void set_top_k(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:faiss.SearchByIdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 top_k_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_faiss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchByIdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:faiss.SearchByIdResponse) */ {
 public:
  SearchByIdResponse();
  virtual ~SearchByIdResponse();

  SearchByIdResponse(const SearchByIdResponse& from);

  inline SearchByIdResponse& operator=(const SearchByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchByIdResponse(SearchByIdResponse&& from) noexcept
    : SearchByIdResponse() {
    *this = ::std::move(from);
  }

  inline SearchByIdResponse& operator=(SearchByIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchByIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchByIdResponse* internal_default_instance() {
    return reinterpret_cast<const SearchByIdResponse*>(
               &_SearchByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SearchByIdResponse* other);
  friend void swap(SearchByIdResponse& a, SearchByIdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchByIdResponse* New() const final {
    return CreateMaybeMessage<SearchByIdResponse>(NULL);
  }

  SearchByIdResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchByIdResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchByIdResponse& from);
  void MergeFrom(const SearchByIdResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchByIdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .faiss.Neighbor neighbors = 2;
  int neighbors_size() const;
  void clear_neighbors();
  static const int kNeighborsFieldNumber = 2;
  ::faiss::Neighbor* mutable_neighbors(int index);
  ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >*
      mutable_neighbors();
  const ::faiss::Neighbor& neighbors(int index) const;
  ::faiss::Neighbor* add_neighbors();
  const ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >&
      neighbors() const;

  // uint64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::uint64 request_id() const;
  void set_request_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:faiss.SearchByIdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor > neighbors_;
  ::google::protobuf::uint64 request_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_faiss_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartbeatResponse

// string message = 1;
inline void HeartbeatResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatResponse::message() const {
  // @@protoc_insertion_point(field_get:faiss.HeartbeatResponse.message)
  return message_.GetNoArena();
}
inline void HeartbeatResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faiss.HeartbeatResponse.message)
}
#if LANG_CXX11
inline void HeartbeatResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faiss.HeartbeatResponse.message)
}
#endif
inline void HeartbeatResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faiss.HeartbeatResponse.message)
}
inline void HeartbeatResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faiss.HeartbeatResponse.message)
}
inline ::std::string* HeartbeatResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:faiss.HeartbeatResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatResponse::release_message() {
  // @@protoc_insertion_point(field_release:faiss.HeartbeatResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:faiss.HeartbeatResponse.message)
}

// -------------------------------------------------------------------

// Vector

// repeated float float_val = 5;
inline int Vector::float_val_size() const {
  return float_val_.size();
}
inline void Vector::clear_float_val() {
  float_val_.Clear();
}
inline float Vector::float_val(int index) const {
  // @@protoc_insertion_point(field_get:faiss.Vector.float_val)
  return float_val_.Get(index);
}
inline void Vector::set_float_val(int index, float value) {
  float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:faiss.Vector.float_val)
}
inline void Vector::add_float_val(float value) {
  float_val_.Add(value);
  // @@protoc_insertion_point(field_add:faiss.Vector.float_val)
}
inline const ::google::protobuf::RepeatedField< float >&
Vector::float_val() const {
  // @@protoc_insertion_point(field_list:faiss.Vector.float_val)
  return float_val_;
}
inline ::google::protobuf::RepeatedField< float >*
Vector::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:faiss.Vector.float_val)
  return &float_val_;
}

// -------------------------------------------------------------------

// SearchRequest

// .faiss.Vector vector = 1;
inline bool SearchRequest::has_vector() const {
  return this != internal_default_instance() && vector_ != NULL;
}
inline void SearchRequest::clear_vector() {
  if (GetArenaNoVirtual() == NULL && vector_ != NULL) {
    delete vector_;
  }
  vector_ = NULL;
}
inline const ::faiss::Vector& SearchRequest::_internal_vector() const {
  return *vector_;
}
inline const ::faiss::Vector& SearchRequest::vector() const {
  const ::faiss::Vector* p = vector_;
  // @@protoc_insertion_point(field_get:faiss.SearchRequest.vector)
  return p != NULL ? *p : *reinterpret_cast<const ::faiss::Vector*>(
      &::faiss::_Vector_default_instance_);
}
inline ::faiss::Vector* SearchRequest::release_vector() {
  // @@protoc_insertion_point(field_release:faiss.SearchRequest.vector)
  
  ::faiss::Vector* temp = vector_;
  vector_ = NULL;
  return temp;
}
inline ::faiss::Vector* SearchRequest::mutable_vector() {
  
  if (vector_ == NULL) {
    auto* p = CreateMaybeMessage<::faiss::Vector>(GetArenaNoVirtual());
    vector_ = p;
  }
  // @@protoc_insertion_point(field_mutable:faiss.SearchRequest.vector)
  return vector_;
}
inline void SearchRequest::set_allocated_vector(::faiss::Vector* vector) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vector_;
  }
  if (vector) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vector = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:faiss.SearchRequest.vector)
}

// uint64 top_k = 2;
inline void SearchRequest::clear_top_k() {
  top_k_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SearchRequest::top_k() const {
  // @@protoc_insertion_point(field_get:faiss.SearchRequest.top_k)
  return top_k_;
}
inline void SearchRequest::set_top_k(::google::protobuf::uint64 value) {
  
  top_k_ = value;
  // @@protoc_insertion_point(field_set:faiss.SearchRequest.top_k)
}

// -------------------------------------------------------------------

// Neighbor

// uint64 id = 1;
inline void Neighbor::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Neighbor::id() const {
  // @@protoc_insertion_point(field_get:faiss.Neighbor.id)
  return id_;
}
inline void Neighbor::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:faiss.Neighbor.id)
}

// float score = 2;
inline void Neighbor::clear_score() {
  score_ = 0;
}
inline float Neighbor::score() const {
  // @@protoc_insertion_point(field_get:faiss.Neighbor.score)
  return score_;
}
inline void Neighbor::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:faiss.Neighbor.score)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .faiss.Neighbor neighbors = 2;
inline int SearchResponse::neighbors_size() const {
  return neighbors_.size();
}
inline void SearchResponse::clear_neighbors() {
  neighbors_.Clear();
}
inline ::faiss::Neighbor* SearchResponse::mutable_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:faiss.SearchResponse.neighbors)
  return neighbors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >*
SearchResponse::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:faiss.SearchResponse.neighbors)
  return &neighbors_;
}
inline const ::faiss::Neighbor& SearchResponse::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:faiss.SearchResponse.neighbors)
  return neighbors_.Get(index);
}
inline ::faiss::Neighbor* SearchResponse::add_neighbors() {
  // @@protoc_insertion_point(field_add:faiss.SearchResponse.neighbors)
  return neighbors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >&
SearchResponse::neighbors() const {
  // @@protoc_insertion_point(field_list:faiss.SearchResponse.neighbors)
  return neighbors_;
}

// -------------------------------------------------------------------

// SearchByIdRequest

// uint64 id = 1;
inline void SearchByIdRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SearchByIdRequest::id() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdRequest.id)
  return id_;
}
inline void SearchByIdRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:faiss.SearchByIdRequest.id)
}

// uint64 top_k = 2;
inline void SearchByIdRequest::clear_top_k() {
  top_k_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SearchByIdRequest::top_k() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdRequest.top_k)
  return top_k_;
}
inline void SearchByIdRequest::set_top_k(::google::protobuf::uint64 value) {
  
  top_k_ = value;
  // @@protoc_insertion_point(field_set:faiss.SearchByIdRequest.top_k)
}

// -------------------------------------------------------------------

// SearchByIdResponse

// uint64 request_id = 1;
inline void SearchByIdResponse::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SearchByIdResponse::request_id() const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdResponse.request_id)
  return request_id_;
}
inline void SearchByIdResponse::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:faiss.SearchByIdResponse.request_id)
}

// repeated .faiss.Neighbor neighbors = 2;
inline int SearchByIdResponse::neighbors_size() const {
  return neighbors_.size();
}
inline void SearchByIdResponse::clear_neighbors() {
  neighbors_.Clear();
}
inline ::faiss::Neighbor* SearchByIdResponse::mutable_neighbors(int index) {
  // @@protoc_insertion_point(field_mutable:faiss.SearchByIdResponse.neighbors)
  return neighbors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >*
SearchByIdResponse::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:faiss.SearchByIdResponse.neighbors)
  return &neighbors_;
}
inline const ::faiss::Neighbor& SearchByIdResponse::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:faiss.SearchByIdResponse.neighbors)
  return neighbors_.Get(index);
}
inline ::faiss::Neighbor* SearchByIdResponse::add_neighbors() {
  // @@protoc_insertion_point(field_add:faiss.SearchByIdResponse.neighbors)
  return neighbors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::faiss::Neighbor >&
SearchByIdResponse::neighbors() const {
  // @@protoc_insertion_point(field_list:faiss.SearchByIdResponse.neighbors)
  return neighbors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faiss

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_faiss_2eproto
